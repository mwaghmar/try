.PHONY: clean install uninstall

MANDIR=@MANDIR@
GZIP=@GZIP@
GZIP_SUFFIX=.3@GZIP_SUFFIX@
BUILD_DIR=@BUILD_DIR@
SRC_DIR=@SRC_DIR@
HTML_SUFFIX=.html

OBJECTS=ck_ht_count 	  		\
	ck_ht_destroy	  		\
	ck_ht_get_spmc	  		\
	ck_ht_grow_spmc	  		\
	ck_ht_hash	  		\
	ck_ht_hash_direct	  	\
	ck_ht_init	  		\
	ck_ht_put_spmc	  		\
	ck_ht_remove_spmc	  	\
	ck_ht_reset_spmc	  	\
	ck_ht_reset_size_spmc	  	\
	ck_ht_set_spmc	  		\
	ck_ht_entry_empty	  	\
	ck_ht_entry_key			\
	ck_ht_entry_key_direct		\
	ck_ht_entry_key_length		\
	ck_ht_entry_key_set		\
	ck_ht_entry_key_set_direct	\
	ck_ht_entry_set			\
	ck_ht_entry_set_direct		\
	ck_ht_entry_value_direct	\
	ck_ht_entry_value		\
	ck_ht_iterator_init		\
	ck_ht_next			\
	ck_ht_stat			\
	ck_bitmap_init			\
	ck_bitmap_reset_mpmc		\
	ck_bitmap_set_mpmc		\
	ck_bitmap_test			\
	ck_bitmap_base			\
	ck_bitmap_size			\
	ck_bitmap_clear			\
	ck_bitmap_bits			\
	ck_bitmap_buffer		\
	ck_bitmap_next			\
	ck_bitmap_iterator_init		\
	ck_epoch_barrier		\
	ck_epoch_begin			\
	ck_epoch_call			\
	ck_epoch_end			\
	ck_epoch_init			\
	ck_epoch_poll			\
	ck_epoch_recycle		\
	ck_epoch_register		\
	ck_epoch_reclaim		\
	ck_epoch_synchronize		\
	ck_epoch_unregister		\
	ck_bag_allocator_set		\
	ck_bag_block_count		\
	ck_bag_block_next		\
	ck_bag_count			\
	ck_bag_destroy			\
	ck_bag_init			\
	ck_bag_iterator_init		\
	ck_bag_member_spmc		\
	ck_bag_next			\
	ck_bag_put_spmc			\
	ck_bag_remove_spmc		\
	ck_bag_set_spmc			\
	ck_hs_init			\
	ck_hs_destroy			\
	CK_HS_HASH			\
	ck_hs_iterator_init		\
	ck_hs_next			\
	ck_hs_get			\
	ck_hs_put			\
	ck_hs_set			\
	ck_hs_remove			\
	ck_hs_grow			\
	ck_hs_count			\
	ck_hs_reset			\
	ck_hs_reset_size		\
	ck_hs_stat			\
	ck_cohort			\
	CK_COHORT_PROTOTYPE		\
	CK_COHORT_TRYLOCK_PROTOTYPE	\
	CK_COHORT_INSTANCE		\
	CK_COHORT_INIT			\
	CK_COHORT_LOCK			\
	CK_COHORT_UNLOCK		\
	CK_COHORT_TRYLOCK		\
	ck_pr				\
	ck_pr_barrier			\
	ck_pr_fas			\
	ck_pr_fence_atomic		\
	ck_pr_fence_atomic_load		\
	ck_pr_fence_atomic_store	\
	ck_pr_fence_load		\
	ck_pr_fence_load_atomic		\
	ck_pr_fence_load_store		\
	ck_pr_fence_load_depends	\
	ck_pr_fence_memory		\
	ck_pr_fence_store		\
	ck_pr_fence_store_atomic	\
	ck_pr_fence_store_load		\
	ck_pr_stall			\
	ck_pr_faa			\
	ck_pr_inc			\
	ck_pr_dec			\
	ck_pr_not			\
	ck_pr_neg			\
	ck_pr_add			\
	ck_pr_sub			\
	ck_pr_and			\
	ck_pr_xor			\
	ck_pr_or			\
	ck_pr_cas			\
	ck_pr_bts			\
	ck_pr_btc			\
	ck_pr_btr			\
	ck_pr_store			\
	ck_pr_load			\
	ck_ring_init			\
	ck_ring_dequeue_spmc		\
	ck_ring_enqueue_spmc		\
	ck_ring_enqueue_spmc_size	\
	ck_ring_trydequeue_spmc		\
	ck_ring_dequeue_spsc		\
	ck_ring_enqueue_spsc		\
	ck_ring_enqueue_spsc_size	\
	ck_ring_size			\
	ck_ring_capacity

all: 
	for target in $(OBJECTS); do 			   \
		$(GZIP) $(SRC_DIR)/doc/$$target > $(BUILD_DIR)/doc/$$target$(GZIP_SUFFIX); \
	done

html:
	for target in $(OBJECTS); do 			   		\
		echo $$target;				   		\
		groff -man -Tascii $(SRC_DIR)/doc/$$target |		\
		    man2html -noheads -bare -cgiurl='$$title.html' >	\
		   $(BUILD_DIR)/doc/$$target$(HTML_SUFFIX); 		\
	done

install:
	mkdir -p $(DESTDIR)/$(MANDIR)/man3 || exit
	cp *$(GZIP_SUFFIX) $(DESTDIR)/$(MANDIR)/man3 || exit

uninstall:
	for target in $(OBJECTS); do 			  \
		rm -f $(DESTDIR)/$(MANDIR)/man3/$$target$(GZIP_SUFFIX); \
	done

clean:
	rm -f $(BUILD_DIR)/doc/*~ $(BUILD_DIR)/doc/*.3.gz $(BUILD_DIR)/doc/*.html

